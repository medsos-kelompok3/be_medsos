// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	models "be_medsos/features/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: input
func (_m *Service) AddUser(input models.User) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DapatUser provides a mock function with given fields: username
func (_m *Service) DapatUser(username string) (models.User, error) {
	ret := _m.Called(username)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetails provides a mock function with given fields: token, userID
func (_m *Service) GetUserDetails(token *jwt.Token, userID uint) (models.User, error) {
	ret := _m.Called(token, userID)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (models.User, error)); ok {
		return rf(token, userID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) models.User); ok {
		r0 = rf(token, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) error); ok {
		r1 = rf(token, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfiles provides a mock function with given fields: token, userID
func (_m *Service) GetUserProfiles(token *jwt.Token, userID uint) (models.User, []models.Posting, error) {
	ret := _m.Called(token, userID)

	var r0 models.User
	var r1 []models.Posting
	var r2 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (models.User, []models.Posting, error)); ok {
		return rf(token, userID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) models.User); ok {
		r0 = rf(token, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) []models.Posting); ok {
		r1 = rf(token, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.Posting)
		}
	}

	if rf, ok := ret.Get(2).(func(*jwt.Token, uint) error); ok {
		r2 = rf(token, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HapusUser provides a mock function with given fields: token, userID
func (_m *Service) HapusUser(token *jwt.Token, userID uint) error {
	ret := _m.Called(token, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) error); ok {
		r0 = rf(token, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: username, password
func (_m *Service) Login(username string, password string) (models.User, error) {
	ret := _m.Called(username, password)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.User); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: token, input
func (_m *Service) UpdateUser(token *jwt.Token, input models.User) (models.User, error) {
	ret := _m.Called(token, input)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, models.User) (models.User, error)); ok {
		return rf(token, input)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, models.User) models.User); ok {
		r0 = rf(token, input)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, models.User) error); ok {
		r1 = rf(token, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
