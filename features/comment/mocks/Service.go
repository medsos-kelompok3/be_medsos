// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	comment "be_medsos/features/comment"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: token, newComment
func (_m *Service) AddComment(token *jwt.Token, newComment comment.Comment) (comment.Comment, error) {
	ret := _m.Called(token, newComment)

	var r0 comment.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, comment.Comment) (comment.Comment, error)); ok {
		return rf(token, newComment)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, comment.Comment) comment.Comment); ok {
		r0 = rf(token, newComment)
	} else {
		r0 = ret.Get(0).(comment.Comment)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, comment.Comment) error); ok {
		r1 = rf(token, newComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HapusComment provides a mock function with given fields: token, commentID
func (_m *Service) HapusComment(token *jwt.Token, commentID uint) error {
	ret := _m.Called(token, commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) error); ok {
		r0 = rf(token, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateComment provides a mock function with given fields: token, input
func (_m *Service) UpdateComment(token *jwt.Token, input comment.Comment) (comment.Comment, error) {
	ret := _m.Called(token, input)

	var r0 comment.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, comment.Comment) (comment.Comment, error)); ok {
		return rf(token, input)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, comment.Comment) comment.Comment); ok {
		r0 = rf(token, input)
	} else {
		r0 = ret.Get(0).(comment.Comment)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, comment.Comment) error); ok {
		r1 = rf(token, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
