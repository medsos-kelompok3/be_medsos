// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	posting "be_medsos/features/posting"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddPosting provides a mock function with given fields: token, newPosting
func (_m *Service) AddPosting(token *jwt.Token, newPosting posting.Posting) (posting.Posting, error) {
	ret := _m.Called(token, newPosting)

	var r0 posting.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, posting.Posting) (posting.Posting, error)); ok {
		return rf(token, newPosting)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, posting.Posting) posting.Posting); ok {
		r0 = rf(token, newPosting)
	} else {
		r0 = ret.Get(0).(posting.Posting)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, posting.Posting) error); ok {
		r1 = rf(token, newPosting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HapusPosting provides a mock function with given fields: token, postingID
func (_m *Service) HapusPosting(token *jwt.Token, postingID uint) error {
	ret := _m.Called(token, postingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) error); ok {
		r0 = rf(token, postingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SemuaPosting provides a mock function with given fields: page, limit
func (_m *Service) SemuaPosting(page int, limit int) ([]posting.Posting, error) {
	ret := _m.Called(page, limit)

	var r0 []posting.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]posting.Posting, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []posting.Posting); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]posting.Posting)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePosting provides a mock function with given fields: token, input
func (_m *Service) UpdatePosting(token *jwt.Token, input posting.Posting) (posting.Posting, error) {
	ret := _m.Called(token, input)

	var r0 posting.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, posting.Posting) (posting.Posting, error)); ok {
		return rf(token, input)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, posting.Posting) posting.Posting); ok {
		r0 = rf(token, input)
	} else {
		r0 = ret.Get(0).(posting.Posting)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, posting.Posting) error); ok {
		r1 = rf(token, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
