// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	models "be_medsos/features/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeletePosting provides a mock function with given fields: postingID
func (_m *Repository) DeletePosting(postingID uint) error {
	ret := _m.Called(postingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(postingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOne provides a mock function with given fields: id
func (_m *Repository) GetOne(id uint) (*models.Posting, []models.Comment, error) {
	ret := _m.Called(id)

	var r0 *models.Posting
	var r1 []models.Comment
	var r2 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Posting, []models.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Posting); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Posting)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) []models.Comment); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTanpaPosting provides a mock function with given fields: page, limit
func (_m *Repository) GetTanpaPosting(page int, limit int) ([]models.Posting, error) {
	ret := _m.Called(page, limit)

	var r0 []models.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Posting, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Posting); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Posting)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPosting provides a mock function with given fields: userID, newPosting
func (_m *Repository) InsertPosting(userID uint, newPosting models.Posting) (models.Posting, error) {
	ret := _m.Called(userID, newPosting)

	var r0 models.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, models.Posting) (models.Posting, error)); ok {
		return rf(userID, newPosting)
	}
	if rf, ok := ret.Get(0).(func(uint, models.Posting) models.Posting); ok {
		r0 = rf(userID, newPosting)
	} else {
		r0 = ret.Get(0).(models.Posting)
	}

	if rf, ok := ret.Get(1).(func(uint, models.Posting) error); ok {
		r1 = rf(userID, newPosting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePosting provides a mock function with given fields: input
func (_m *Repository) UpdatePosting(input models.Posting) (models.Posting, error) {
	ret := _m.Called(input)

	var r0 models.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Posting) (models.Posting, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(models.Posting) models.Posting); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(models.Posting)
	}

	if rf, ok := ret.Get(1).(func(models.Posting) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
